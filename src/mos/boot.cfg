
##### THE MOS assumes it is running at 7D0000 any change to this will require looking for hardcoded references
##### to this here and in the window.asm, debug.asm file

MEMORY {
    ZP:                 start = $0070, size = $0020, type = rw;

#bank 0 ram locations
    RAM_DEICE_BSS:      start = $002100, size = $0100, type = rw, define=yes;
    RAM_BMOS_DEFHWND:   start = $00FB00, size = $E0, type = rw;                     
    RAM_816HW_VECS:     start = $00FFE0, size = $1A, type = rw;                     


#bank 0 emu ovelay locations
    EMU_BBCMOS_OSAPI:   start = $00FFB6, size = $44, type = rw;
    EMU_BBCHW_VECS:     start = $00FFFA, size = $06, type = rw;
    EMU_BMOS_CODE_EMU:  start = $00C300, size = $3C00, type = ro;

#boot mos rom areas
    BMOS_FONT:          start = $FFC000, size = $0300, file = %O, fill=yes, fillval=$FF;
    BMOS_CODE:          start = $FFC300, size = $1D00, file = %O, fill=yes, fillval=$FF;
    BMOS_NAT_CODE:      start = $7D2000, size = $1B00, file = %O, fill=yes, fillval=$FF;
    BMOS_DEFHWND:       start = $FFFB00, size = $E0,   file = %O, fill=yes, fillval=$FF;
    BMOS_816HW_VECS:    start = $FFFBE0, size = $20,   file = %O, fill=yes, fillval=$FF; 
    HARDWAREWINDOW:     start = $7D3C00, size = $300,  file = %O, fill=yes, fillval=$AA;
    BMOS_BBC_EXT_VECS:  start = $FFFF00, size = $B6,   file = %O, fill=yes, fillval=$FF;
    BMOS_BBC_OSAPI:     start = $FFFFB6, size = $44,   file = %O, fill=yes, fillval=$FF;
    BMOS_BBCHW_VECS:    start = $FFFFFA, size = $06,   file = %O, fill=yes, fillval=$FF;

}
SEGMENTS {

        #TODO: hw window needs to be clear maybe use some trickery to access a shadow?

    #default character font should be at start of ROM
    FONT:               load = BMOS_FONT,                               type = ro;
    #boot_CODE: code that runs in emu mode at the start before switching to non-boot mode
    boot_CODE:          load = BMOS_CODE,                               type = ro;
    #main OS code
    CODE:               load = BMOS_CODE,                               type = ro;
    #emu OS code
    BBCCODE:            load = BMOS_CODE,                               type = ro;

    BMOS_NAT_CODE:      load = BMOS_NAT_CODE,                           type = ro;

    #816 specific hardware vectors (relocated to 8FE0 in boot mode, FFE0 in native mode)
    HW816_VECS:         load = BMOS_816HW_VECS, run = RAM_816HW_VECS,   type = ro, define = yes;
    #BBC micro/6502 hardware vectors always from ROM in emu mode
    HWBBC_VECS:         load = BMOS_BBCHW_VECS, run = EMU_BBCHW_VECS,   type = ro, define = yes;
    #MOS extended vector area, in ROM always in emu/mos mode
    BBC_EXT_VECS:       load = BMOS_BBC_EXT_VECS,                       type = ro, define = yes;
    #DeIce working data page, assumed in bank 0
    DEICE_BSS:          load = RAM_DEICE_BSS,                           type = bss, define = yes;
    #Debugging strings
    debug_strings:      load = HARDWAREWINDOW,                          type = ro, define = yes;
    #default hardware handlers, copied to bank 0
    default_handlers:   load = BMOS_DEFHWND,   run = RAM_BMOS_DEFHWND,  type = ro, define = yes;
    BBC_MOS_OSAPI:      load = BMOS_BBC_OSAPI,  run = EMU_BBCMOS_OSAPI, type = ro, define = yes;
}
FEATURES {
}
SYMBOLS {  
    __KERNEL_BASE__:    value = $7D0000, type = export;     #hardcoded kernel base address in native address space
}