MEMORY {
    ZP:                 start = $0070, size = $0020, type = rw;

#bank 0 ram locations
    RAM_DEICE_BSS:      start = $600,  size = $0100, type = rw, define=yes;
    RAM_DEFHW_HND:      start = $009000, size = $100, type = rw;
    RAM_816HW_VECS:     start = $008FE0, size = $1A, type = rw;                     
    RAM_BBCHW_VECS:     start = $00FFFA, size = $06, type = rw;

#boot mos rom areas
    BMOS_FONT:          start = $FFC000, size = $0300, file = %O, fill=yes, fillval=$FF;
    BMOS_CODE:          start = $FFC300, size = $3C00, file = %O, fill=yes, fillval=$FF;
    BMOS_BBC_EXT_VECS:  start = $FFFF00, size = $E0,   file = %O, fill=yes, fillval=$FF;
    BMOS_816HW_VECS:    start = $FFFFE0, size = $1A,   file = %O, fill=yes, fillval=$FF;
    BMOS_BBCHW_VECS:    start = $FFFFFA, size = $06,   file = %O, fill=yes, fillval=$FF;

}
SEGMENTS {
    boot_CODE:          load = BMOS_CODE,                               type = ro;
    CODE:               load = BMOS_CODE,                               type = ro;
    HW816_VECS:         load = BMOS_816HW_VECS, run = RAM_816HW_VECS,   type = ro, define = yes;
    HWBBC_VECS:         load = BMOS_BBCHW_VECS, run = RAM_BBCHW_VECS,   type = ro, define = yes;
    BBC_EXT_VECS:       load = BMOS_BBC_EXT_VECS,                       type = ro, define = yes;
    FONT:               load = BMOS_FONT,                               type = ro;
    DEICE_BSS:          load = RAM_DEICE_BSS,                           type = bss, define = yes;
    debug_strings:      load = BMOS_CODE,                               type = ro;
    default_handlers:   load = BMOS_CODE,       run = RAM_DEFHW_HND,    type = rw, define = yes;

}
FEATURES {
}
SYMBOLS {
}